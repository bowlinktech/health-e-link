/* Chad 11-8-2013 */
ALTER TABLE `universalTranslator`.`providers` 
RENAME TO  `universalTranslator`.`info_providers` ;

ALTER TABLE `universalTranslator`.`configurations` 
ADD COLUMN `dateCreated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP AFTER `messageTypeId`;


/* Chad 11-11-13 */
CREATE TABLE `universalTranslator`.`ref_transportMethods` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `transportMethod` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`));
  
INSERT INTO `universalTranslator`.`ref_transportMethods` (`transportMethod`) VALUES ('File Upload');
INSERT INTO `universalTranslator`.`ref_transportMethods` (`transportMethod`) VALUES ('Online Form');
INSERT INTO `universalTranslator`.`ref_transportMethods` (`transportMethod`) VALUES ('Secure FTP');
INSERT INTO `universalTranslator`.`ref_transportMethods` (`transportMethod`) VALUES ('JSON');

ALTER TABLE `universalTranslator`.`configurations` 
ADD COLUMN `stepsCompleted` INT NOT NULL DEFAULT 0 AFTER `dateCreated`;

/* Chad 11-12-2013 */
ALTER TABLE `universalTranslator`.`configurationTransportDetails` 
DROP FOREIGN KEY `filetypeId`,
DROP FOREIGN KEY `fileDelimId`;


ALTER TABLE `universalTranslator`.`configurationFieldMappings` 
CHANGE COLUMN `sourceFieldNo` `configurationFieldId` INT(11) NOT NULL ,
CHANGE COLUMN `targetFieldNo` `messageTypeFieldId` INT(11) NOT NULL ;

ALTER TABLE `universalTranslator`.`configurationFormFields` 
DROP COLUMN `saveToTableCol`,
DROP COLUMN `saveToTableName`,
ADD COLUMN `useField` BIT NOT NULL DEFAULT FALSE AFTER `bucketDspPos`,
DROP INDEX `ffrefTableColId_idx` ,
DROP INDEX `ffrefTableId_idx` ;

ALTER TABLE `universalTranslator`.`configurationFormFields` 
ADD COLUMN `fieldDesc` VARCHAR(255) NULL DEFAULT NULL AFTER `fieldNo`,
ADD COLUMN `messageTypeFieldId` INT NOT NULL DEFAULT 0 AFTER `id`;

ALTER TABLE `universalTranslator`.`configurationTransportDetails` 
CHANGE COLUMN `fileType` `fileType` INT(11) NULL DEFAULT NULL ;

/* Chad 11-14-2013 */
DROP TABLE `universalTranslator`.`configurationFieldMappings`;

ALTER TABLE `universalTranslator`.`configurations` 
DROP COLUMN `configName`;

ALTER TABLE `universalTranslator`.`configurationFormFields` 
ADD COLUMN `transportDetailId` INT NOT NULL AFTER `configId`,
ADD INDEX `formtransportDetailId_idx` (`transportDetailId` ASC);
ALTER TABLE `universalTranslator`.`configurationFormFields` 
ADD CONSTRAINT `formtransportDetailId`
  FOREIGN KEY (`transportDetailId`)
  REFERENCES `universalTranslator`.`configurationTransportDetails` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;
  
  /* Chad 11-18-2013 */
  ALTER TABLE `universalTranslator`.`rel_configurationDataTranslations` 
CHANGE COLUMN `fieldNo` `fieldId` INT(11) NOT NULL ,
 ADD COLUMN `transportMethod` INT NOT NULL AFTER `configId`;

ALTER TABLE `universalTranslator`.`rel_configurationDataTranslations` 
ADD INDEX `dtFieldId_idx` (`fieldId` ASC);
ALTER TABLE `universalTranslator`.`rel_configurationDataTranslations` 
ADD CONSTRAINT `dtFieldId`
  FOREIGN KEY (`fieldId`)
  REFERENCES `universalTranslator`.`configurationFormFields` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

  
/* Grace 11-18-2013 */
DROP TABLE IF EXISTS `lookUpTables`;
CREATE TABLE `lookUpTables` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `utTableName` varchar(45) NOT NULL,
  `displayText` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `urlId` varchar(45) DEFAULT NULL,
  `dateCreated` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `dateModified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `utTableName_UNIQUE` (`utTableName`),
  UNIQUE KEY `urlId_UNIQUE` (`urlId`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `lookUpTables`
--

LOCK TABLES `lookUpTables` WRITE;
/*!40000 ALTER TABLE `lookUpTables` DISABLE KEYS */;
INSERT INTO `lookUpTables` VALUES (1,'lu_BestTimeToCall','Best Time To Call',NULL,'698Bes4054all','2013-11-18 23:54:00','2013-11-18 23:54:00'),(2,'lu_BrandNames','Brand Name',NULL,'585Bra6556mes','2013-11-18 23:54:00','2013-11-18 23:54:00'),(3,'lu_Consents','Consent',NULL,'1101Con9058nts','2013-11-18 23:54:00','2013-11-18 23:54:00'),(4,'lu_Contraceptives','Contraceptives',NULL,'3836Con1560ves','2013-11-18 23:54:00','2013-11-18 23:54:00'),(5,'lu_Counties','County',NULL,'3467Cou4061ies','2013-11-18 23:54:00','2013-11-18 23:54:00'),(6,'lu_Genders','Gender',NULL,'3540Gen6563ers','2013-11-18 23:54:00','2013-11-18 23:54:00'),(7,'lu_GeneralHealthStatuses','General Health Status',NULL,'6087Gen9065ses','2013-11-18 23:54:00','2013-11-18 23:54:00'),(8,'lu_GeneralHealths','General Health',NULL,'4627Gen1567ths','2013-11-18 23:54:00','2013-11-18 23:54:00'),(9,'lu_HealthStatuses','Health Status',NULL,'2544Hea4069ses','2013-11-18 23:54:00','2013-11-18 23:54:00'),(10,'lu_Hispanics','Hispanic',NULL,'6786His6571ics','2013-11-18 23:54:00','2013-11-18 23:54:00'),(11,'lu_Immunizations','Immunization',NULL,'5994Imm9072ons','2013-11-18 23:54:00','2013-11-18 23:54:00'),(12,'lu_Languages','Lauguage',NULL,'8263Lan1574ges','2013-11-18 23:54:00','2013-11-18 23:54:00'),(13,'lu_Manufacturers','Manufacturer',NULL,'10508Man4076ers','2013-11-18 23:54:00','2013-11-18 23:54:00'),(14,'lu_MartialStatuses','Marital Status',NULL,'13663Mar6578ses','2013-11-18 23:54:00','2013-11-18 23:54:00'),(15,'lu_MedicalConditionStatuses','Medical Condition Status',NULL,'6817Med9080ses','2013-11-18 23:54:00','2013-11-18 23:54:00'),(16,'lu_MedicalConditionTypes','Medical Condition Type',NULL,'5516Med1582pes','2013-11-18 23:54:00','2013-11-18 23:54:00'),(17,'lu_MedicalConditions','Medical Condition',NULL,'6127Med4083ons','2013-11-18 23:54:00','2013-11-18 23:54:00'),(18,'lu_Medications','Medication',NULL,'13819Med6585ons','2013-11-18 23:54:00','2013-11-18 23:54:00'),(19,'lu_PatientStatuses','Patient Status',NULL,'14389Pat9087ses','2013-11-18 23:54:00','2013-11-18 23:54:00'),(20,'lu_PayerTypes','Payer Type',NULL,'9670Pay1589pes','2013-11-18 23:54:00','2013-11-18 23:54:00'),(21,'lu_PhoneTypes','Phone Type',NULL,'3055Pho4091pes','2013-11-18 23:54:00','2013-11-18 23:54:00'),(22,'lu_ProcedureStatuses','Procedure Status',NULL,'6091Pro6592ses','2013-11-18 23:54:00','2013-11-18 23:54:00'),(23,'lu_Procedures','Procedure',NULL,'21804Pro9094res','2013-11-18 23:54:00','2013-11-18 23:54:00'),(24,'lu_Races','Race',NULL,'21825Rac1596ces','2013-11-18 23:54:00','2013-11-18 23:54:00'),(25,'lu_TestResultsTypes','Test Results',NULL,'17571Tes4098pes','2013-11-18 23:54:00','2013-11-18 23:54:00'),(26,'lu_TestStatuses','Test Status',NULL,'20438Tes6600ses','2013-11-18 23:54:00','2013-11-18 23:54:00'),(27,'lu_Tests','Test',NULL,'22192Tes9102sts','2013-11-18 23:54:00','2013-11-18 23:54:00');
/*!40000 ALTER TABLE `lookUpTables` ENABLE KEYS */;
UNLOCK TABLES;


/* Chad 11-22-2013 */

ALTER TABLE `universalTranslator`.`configurationSchedule` 
ADD COLUMN `transportMethod` INT NOT NULL AFTER `configId`;


/* Grace 11-25-2013 **/

CREATE TABLE `universalTranslator`.`message_ToOrg` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `messageId` INT NOT NULL COMMENT 'This is the messageId from message_Details table.',
  `messageTypeId` INT NOT NULL,
  `orgId` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  `address1` VARCHAR(45) NULL,
  `address2` VARCHAR(45) NULL,
  `city` VARCHAR(45) NULL,
  `state` VARCHAR(2) NULL,
  `postalCode` VARCHAR(45) NULL,
  `county` VARCHAR(45) NULL,
  `phone` VARCHAR(45) NULL,
  `fax` VARCHAR(45) NULL,
  `dateCreated` DATETIME NOT NULL DEFAULT current_timestamp,
  PRIMARY KEY (`id`));


ALTER TABLE `universalTranslator`.`message_ToOrg` 
ADD INDEX `FKMessToMessId_idx` (`messageId` ASC),
ADD INDEX `FKMessToOrgId_idx` (`orgId` ASC),
ADD INDEX `FKMessToMessageTypeId_idx` (`messageTypeId` ASC);
ALTER TABLE `universalTranslator`.`message_ToOrg` 
ADD CONSTRAINT `FKMessToMessId`
  FOREIGN KEY (`messageId`)
  REFERENCES `universalTranslator`.`message_Details` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION,
ADD CONSTRAINT `FKMessToOrgId`
  FOREIGN KEY (`orgId`)
  REFERENCES `universalTranslator`.`organizations` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION,
ADD CONSTRAINT `FKMessToMessageTypeId`
  FOREIGN KEY (`messageTypeId`)
  REFERENCES `universalTranslator`.`messagetypes` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

CREATE TABLE `message_ToProvider` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `messageId` int(11) NOT NULL COMMENT 'This is the messageId from message_Details table.',
  `messageTypeId` int(11) NOT NULL,
  `providerId` int(11) NOT NULL,
  `name` varchar(45) DEFAULT NULL,
  `address1` varchar(45) DEFAULT NULL,
  `address2` varchar(45) DEFAULT NULL,
  `city` varchar(45) DEFAULT NULL,
  `state` varchar(2) DEFAULT NULL,
  `postalCode` varchar(45) DEFAULT NULL,
  `county` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `dateCreated` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `FKMessToPMessId_idx` (`messageId`),
  KEY `FKMessToPMessageTypeId_idx` (`messageTypeId`),
  CONSTRAINT `FKMessToPMessId` FOREIGN KEY (`messageId`) REFERENCES `message_Details` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FKMessToPMessageTypeId` FOREIGN KEY (`messageTypeId`) REFERENCES `messagetypes` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


ALTER TABLE `universalTranslator`.`message_ToProvider` 
ADD INDEX `FKMessToPProviderId_idx` (`providerId` ASC);
ALTER TABLE `universalTranslator`.`message_ToProvider` 
ADD CONSTRAINT `FKMessToPProviderId`
  FOREIGN KEY (`providerId`)
  REFERENCES `universalTranslator`.`info_providers` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

  CREATE TABLE `message_FromOrg` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `messageId` int(11) NOT NULL COMMENT 'This is the messageId from message_Details table.',
  `messageTypeId` int(11) NOT NULL,
  `orgId` int(11) NOT NULL,
  `name` varchar(45) DEFAULT NULL,
  `address1` varchar(45) DEFAULT NULL,
  `address2` varchar(45) DEFAULT NULL,
  `city` varchar(45) DEFAULT NULL,
  `state` varchar(2) DEFAULT NULL,
  `postalCode` varchar(45) DEFAULT NULL,
  `county` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `dateCreated` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `FKMessFromMessId_idx` (`messageId`),
  KEY `FKMessFromOrgId_idx` (`orgId`),
  KEY `FKMessFromMessageTypeId_idx` (`messageTypeId`),
  CONSTRAINT `FKMessFromMessId` FOREIGN KEY (`messageId`) REFERENCES `message_Details` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FKMessFromOrgId` FOREIGN KEY (`orgId`) REFERENCES `organizations` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FKMessFromMessageTypeId` FOREIGN KEY (`messageTypeId`) REFERENCES `messagetypes` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  
CREATE TABLE `message_FromProvider` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `messageId` int(11) NOT NULL COMMENT 'This is the messageId from message_Details table.',
  `messageTypeId` int(11) NOT NULL,
  `providerId` int(11) NOT NULL,
  `name` varchar(45) DEFAULT NULL,
  `address1` varchar(45) DEFAULT NULL,
  `address2` varchar(45) DEFAULT NULL,
  `city` varchar(45) DEFAULT NULL,
  `state` varchar(2) DEFAULT NULL,
  `postalCode` varchar(45) DEFAULT NULL,
  `county` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `dateCreated` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `FKMessFromPMessId_idx` (`messageId`),
  KEY `FKMessFromPMessageTypeId_idx` (`messageTypeId`),
  KEY `FKMessFromPProviderId_idx` (`providerId`),
  CONSTRAINT `FKMessFromPProviderId` FOREIGN KEY (`providerId`) REFERENCES `info_providers` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FKMessFromPMessageTypeId` FOREIGN KEY (`messageTypeId`) REFERENCES `messagetypes` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FKMessFromPMessId` FOREIGN KEY (`messageId`) REFERENCES `message_Details` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/* end grace 11.25.13 */

/*11.26.13*/
CREATE TABLE `Macro_Names` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Category` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `Macro_Name` varchar(100) CHARACTER SET utf8 DEFAULT NULL,
  `Macro_Short_Name` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `Ref_Number` int(11) DEFAULT NULL,
  `Date_Display` char(10) DEFAULT NULL,
  `Formula` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `Invalid_When` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `FieldA_Question` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `FieldB_Question` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `Con1_Question` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `Con2_Question` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (1, N'DO NOT PASS', N'If Source Field = Constant, do not pass record.', N'IF SF = CON1 NOPASS', 1, NULL, N'fd.@Src = ''@C1'' ', NULL, NULL, NULL, N'Please enter the constant value that will be compared to the current field.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (2, N'DO NOT PASS', N'If Source Field = Field A, do not pass record.', N'IF SF = SFA NOPASS', 2, NULL, N'fd.@Src = fd.@F1 ', NULL, N'Please enter the field number of the field to be compared to the current field.', NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (3, N'DO NOT PASS', N'If Source Field > Field A, do not pass record.', N'IF SF > SFA NOPASS', 3, NULL, N'fd.@Src > fd.@F1', NULL, N'Please enter the field number of the field to be compared to the current field.', NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (4, N'DO NOT PASS', N'If Source Field < Field A, do not pass record.', N'IF SF < SFA NOPASS', 4, NULL, N'fd.@Src < fd.@F1 ', NULL, N'Please enter the field number of the field to be compared to the current field.', NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (5, N'MAPLINK SPECS', N'Insert today''s date into Source Field.', N'INSERTDATE', 5, NULL, N'LookupValue = LEFT(CONVERT(CHAR, GETDATE(), 112), 8)', NULL, NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (6, N'MAPLINK SPECS', N'Concatenate - Source Field = Field A + Field B', N'CAT SF = SFA + SFB', 6, NULL, N'LookupValue = LEFT(ISNULL(fd.@F1, '''') + ''@C1'' + ISNULL(fd.@F2, ''''), 200)', NULL, N'Please enter the field number of the first field to be concatenated.', N'Please enter the field number of the  field to be appended.', N'Please enter the constant value that will separate the concatenated values.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (8, N'MAPLINK SPECS', N'Concatenate - Source Field = Constant + Field A', N'CAT SF = CON1 + SFA', 7, NULL, N'LookupValue = LEFT(RTRIM(''@C1'' + ''@C2'') + fd.@F1, 200)', NULL, N'Please enter the field number of the field to be appended to the constant.', NULL, N'Please enter the constant value to be concatenated.', N'Please enter the constant value that will separate the concatenated values.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (9, N'MAPLINK SPECS', N'Concatenate - Source Field = Field A + CON', N'CAT SF = SFA + CON1', 8, NULL, N'LookupValue = LEFT(fd.@F1 + ''@C2''+ ''@C1'', 200)', NULL, N'Please enter the field number of the field to be concatenated.', NULL, N'Please enter the constant value to be appended to the field.', N'Please enter the constant value  that will separate the concatenated values.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (10, N'MAPLINK SPECS', N'Remove Constant Substring from Source Field', N'DEL SUBSTRING', 9, NULL, N'LookupValue = dbo.ufn_DeleteString(SourceValue, ''@C1'', ''@C2'')', NULL, N'', NULL, N'Please enter the text string to be removed from the current field.', N'Please enter where to search in the current field (A=anywhere, E=end, S=start)');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (11, N'MAPLINK SPECS', N'Convert case of Source Field to all upper case', N'UPPER CASE', 10, NULL, N'LookupValue = UPPER(SourceValue)', NULL, NULL, NULL, N'', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (12, N'MAPLINK SPECS', N'Convert case of Source Field to all lower case', N'LOWER CASE', 11, NULL, N'LookupValue = LOWER(SourceValue)', NULL, NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (13, N'MAPLINK SPECS', N'Source Field = Field A + Field B', N'ADD FIELDS', 12, NULL, N'LookupValue = STR(CAST(fd.@F1 AS DECIMAL(15,5)) + CAST(fd.@F2 AS DECIMAL(15,5)), 10, CASE WHEN LEN(''@C1'') = 0 THEN 0 ELSE @C1 END)', N'ISNUMERIC(fd.@F1) = 0 OR ISNUMERIC(fd.@F2) = 0 OR CHARINDEX(''$'', fd.@F1) <> 0 OR CHARINDEX(''$'', fd.@F2) <> 0', N'Please enter the field number of the first field to be added.', N'Please enter the field number of the field to be added to the first field.', N'Please indicate the number of places to the right of the decimal point in the result.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (14, N'MAPLINK SPECS', N'Source Field = Field A - Field B', N'SUBTRACT  FIELDS', 13, NULL, N'LookupValue = STR(CAST(fd.@F1 AS DECIMAL(15,5)) - CAST(fd.@F2 AS DECIMAL(15,5)), 10, CASE WHEN LEN(''@C1'') = 0 THEN 0 ELSE @C1 END)', N'ISNUMERIC(fd.@F1) = 0 OR ISNUMERIC(fd.@F2) = 0 OR CHARINDEX(''$'', fd.@F1) <> 0 OR CHARINDEX(''$'', fd.@F2) <> 0', N'Please enter the field number of the first field to be subtracted.', N'Please enter the field number of the field to be subtracted from the first field.', N'Please indicate the number of places to the right of the decimal point in the result.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (15, N'MAPLINK SPECS', N'Source Field = Field A/Field B', N'DIVIDE FIELDS', 14, NULL, N'LookupValue = STR(CAST(fd.@F1 AS DECIMAL(15,5)) / CAST(fd.@F2 AS DECIMAL(15,5)), 10, CASE WHEN LEN(''@C1'') = 0 THEN 0 ELSE @C1 END)', N'ISNUMERIC(fd.@F1) = 0 OR ISNUMERIC(fd.@F2) = 0 OR fd.@F2 = 0 OR CHARINDEX(''$'', fd.@F1) <> 0 OR CHARINDEX(''$'', fd.@F2) <> 0', N'Please enter the field number of the first field to be divided.', N'Please enter the field number of the field to be divided into the first field.', N'Please indicate the number of places to the right of the decimal point in the result.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (16, N'MAPLINK SPECS', N'Source Field = Field A * Field B', N'MULTIPLY FIELDS', 15, NULL, N'LookupValue = STR(CAST(fd.@F1 AS DECIMAL(15,5)) * CAST(fd.@F2 AS DECIMAL(15,5)), 10, CASE WHEN LEN(''@C1'') = 0 THEN 0 ELSE @C1 END)', N'ISNUMERIC(fd.@F1) = 0 OR ISNUMERIC(fd.@F2) = 0 OR CHARINDEX(''$'', fd.@F1) <> 0 OR CHARINDEX(''$'', fd.@F2) <> 0', N'Please enter the field number of the first field to be multiplied.', N'Please enter the field number of the field that the first field will be multiplied by.', N'Please indicate the number of places to the right of the decimal point in the result.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (17, N'MAPLINK SPECS', N'Insert constant into Source Field', N'SCONSTANT', 16, NULL, N'LookupValue = ''@C1''', NULL, NULL, NULL, N'Please enter the constant value to be inserted into the current feld.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (55, N'MAPLINK SPECS', N'Keep only top ranked value in list', N'TOPRANKED', 52, NULL, N'LookupValue = dbo.ufn_FindPriority(SourceValue, ''@C1'', ''@varKey'')', NULL, NULL, NULL, N'Please enter the name of the crosswalk that ranks the value.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (20, N'MAPLINK SPECS', N'If Source Field A = Constant1, SF = Constant2', N'IF SFA = CON1, SF = CON2', 19, NULL, N'LookupValue = CASE WHEN fd.@F1 = ''@C1'' THEN ''@C2'' ELSE SourceValue END', NULL, N'Please enter the field number of the field to be checked.', N'', N'Please enter the constant value to be checked in the first field.', N'Please enter the constant value to be stored in the current field if the conditon is met.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (21, N'MAPLINK SPECS', N'FPDS Old Race Field to New Race Fields', N'FPDS RACE', 20, NULL, N'dbo.sp_SetRace ''FPDS'', ''@Src'', ''@varKey''', NULL, NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (22, N'MAPLINK SPECS', N'mmddyyyy to yyyymmdd', N'DATE', 21, N'mmddyyyy  ', N'LookupValue = dbo.ufn_TransformDate(SourceValue, 0, YEAR(GETDATE()))', N'dbo.ufn_CheckDate(fd.@Src, 0, YEAR(GETDATE())) = 0', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (23, N'MAPLINK SPECS', N'mm/dd/yyyy to yyyymmdd', N'DATE1', 22, N'mm/dd/yyyy', N'LookupValue = dbo.ufn_TransformDate(SourceValue, 1, YEAR(GETDATE()))', N'dbo.ufn_CheckDate(fd.@Src, 1, YEAR(GETDATE())) = 0', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (24, N'MAPLINK SPECS', N'dd-mon-yy to yyyymmdd', N'DATE2', 23, N'dd-mon-yy ', N'LookupValue = dbo.ufn_TransformDate(SourceValue, 2, YEAR(GETDATE()))', N'dbo.ufn_CheckDate(fd.@Src, 2, YEAR(GETDATE())) = 0', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (25, N'MAPLINK SPECS', N'm/d/yyyy (1 or 2 digit D/M) to yyyymmdd', N'DATE3', 24, N'm/d/yyyy  ', N'LookupValue = dbo.ufn_TransformDate(SourceValue, 3, YEAR(GETDATE()))', N'dbo.ufn_CheckDate(fd.@Src, 3, YEAR(GETDATE())) = 0', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (26, N'MAPLINK SPECS', N'yyyy-mm-dd to yyyymmdd', N'DATE4', 25, N'yyyy-mm-dd', N'LookupValue = dbo.ufn_TransformDate(SourceValue, 4, YEAR(GETDATE()))', N'dbo.ufn_CheckDate(fd.@Src, 4, YEAR(GETDATE())) = 0', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (27, N'MAPLINK SPECS', N'Change Female to Rely on Other Method', N'PPCTRELY', 26, N'          ', N'LookupValue = CASE WHEN ''@Src'' = ''F5'' AND fd.F8 <> ''M'' THEN ''6'' ELSE SourceValue END', NULL, NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (28, N'MAPLINK SPECS', N' yyyymmdd to yyyymmdd', N'DATE5', 27, N'yyyymmdd  ', N'LookupValue = dbo.ufn_TransformDate(SourceValue, 5, YEAR(GETDATE()))', N'dbo.ufn_CheckDate(fd.@Src, 5, YEAR(GETDATE())) = 0', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (29, N'MAPLINK SPECS', N'FPDS Find medserv substrings and replace with maplink', N'FPDS FINDREPLACE', 28, NULL, N'dbo.sp_FindReplace ''@Src'', ''@varKey'', ''@C2'', ''@C1'', ''CHG''', NULL, NULL, NULL, N'Please enter the value separator (, or ;).', N'Please enter the name of the crosswalk.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (30, N'MAPLINK SPECS', N'Find substrings and replace with maplink', N'MAP FINDREPLACE', 29, NULL, N'dbo.sp_FindReplace ''@Src'', ''@varKey'', ''@C1'', '','', ''CHG''', NULL, NULL, NULL, N'Please enter the name of the crosswalk.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (31, N'MAPLINK SPECS', N'Find substring and replace with constant', N'CONSTANT FINDREPLACE', 30, NULL, N'LookupValue = REPLACE(SourceValue, ''@C1'', ''@C2'')', NULL, NULL, NULL, N'Please enter the constant value that will be replaced.', N'Please enter the constant value that will replace the original constant.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (33, N'MAPLINK SPECS', N'CFHC Old Race Field to New Race Fields', N'CFHC RACE', 31, NULL, N'dbo.sp_SetRace ''CFHC'', ''@Src'', ''@varKey''', NULL, NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (35, N'MAPLINK SPECS', N'Source Field = SF * CON1', N'MULTIPLY CONSTANT', 33, NULL, N'LookupValue = CASE WHEN LEN(RTRIM(SourceValue)) = 0 THEN SourceValue ELSE STR(CAST(SourceValue AS DECIMAL(15,5)) * @C1, 10, CASE WHEN LEN(''@C2'') > 0 THEN @C2 ELSE 0 END) END', N'(LEN(RTRIM(fd.@Src)) > 0 AND ISNUMERIC(fd.@Src) = 0) OR ISNUMERIC(''@C1'') = 0 OR CHARINDEX(''$'', fd.@Src) <> 0', N'', NULL, N'Please enter the constant value that the field will be multiplied by.', N'Please enter the number of places to the right of the decimal point in the result.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (36, N'MAPLINK SPECS', N'Source Field = SF / CON1', N'DIVIDE CONSTANT', 34, NULL, N'LookupValue = CASE WHEN LEN(RTRIM(SourceValue)) = 0 THEN SourceValue ELSE STR(CAST(SourceValue AS DECIMAL(15,5)) / @C1, 10, CASE WHEN LEN(''@C2'') > 0 THEN @C2 ELSE 0 END) END', N'(LEN(RTRIM(fd.@Src)) > 0 AND ISNUMERIC(fd.@Src) = 0) OR ISNUMERIC(''@C1'') = 0 OR  ''@C1'' = ''0'' OR CHARINDEX(''$'', fd.@Src) <> 0', N'', NULL, N'Please enter the constant value that the field will be divided by.', N'Please enter the number of places to the right of the decimal point in the result.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (37, N'MAPLINK SPECS', N'Insert Constant into Target Field', N'TCONSTANT', 35, NULL, N'@F1 = ''@C1''', NULL, N'Please enter the field number of the target field.', NULL, N'Please enter the constant value to be stored.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (39, N'MAPLINK SPECS', N'Crosswalk source field to target field', N'F2F CROSSWALK', 37, NULL, N'@F2 = dbo.ufn_F2F(RTRIM(fd.@Src), ''@C1'', ''@varKey'', ''@C2'')', NULL, N'', N'Please enter the target field number where the converted value will be stored.', N'Please enter the name of the crosswalk.', N'Please enter CLEAR, PASS or the default value to be used if no match is found.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (44, N'MAPLINK SPECS', N'Poverty Level', N'TPOVERTY LEVEL', 45, NULL, N'@F1 = dbo.ufn_GetPovertyLevel(fd.@F2, CAST(@C1 AS INT), @C2, YEAR(GETDATE()))', N'', N'Please enter the target field number where the poverty level is kept.', N'Please enter the field number for the visit date', N'Please enter the field name ("fd.Fx") for the family size', N'Please enter the field name ("fd.Fx") for the weekly income');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (46, N'MAPLINK SPECS', N'If Source Field A = Constant1, Target file B = Constant2', N'IF SFA = CON1, TFB = CON2', 46, NULL, N'@F2 = CASE WHEN fd.@F1 = ''@C1'' THEN ''@C2'' ELSE tfd.@F2 END', NULL, N'Please enter the field number of the field to be checked.', N'Please enter the target field number where the result will be stored.', N'Please enter the constant value to be checked in the first field.', N'Please enter the constant value to be stored when the test condition is met.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (53, N'MAPLINK SPECS', N'If Source >= @C1, ''Y'', ''N''', N'OFAGE', 50, NULL, N'@F1 = CASE WHEN dbo.ufn_AgeInYears(fd.@Src, GETDATE()) >= @C1 THEN ''yes'' ELSE ''no'' END', N'dbo.ufn_CheckDate(fd.@Src, 1, YEAR(GETDATE())) = 0 OR ISNUMERIC(''@C1'') = 0', N'Please enter the field number where the result is kept.', NULL, N'Please enter the cutoff age.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (47, N'MAPLINK SPECS', N'Find substring and remove maplink target', N'FINDREMOVE', 46, NULL, N'dbo.sp_FindReplace ''@Src'', ''@varKey'', ''@C2'', ''@C1'', ''DEL''', NULL, NULL, NULL, N'Please enter the value separator (, or ;).', N'Please enter the name of the crosswalk.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (40, N'MAPLINK SPECS', N'mddyyyy (1 or 2 dgit month) to yyyymmdd', N'DATE6', 41, N'mddyyyy   ', N'LookupValue = dbo.ufn_TransformDate(SourceValue, 6, YEAR(GETDATE()))', N'dbo.ufn_CheckDate(fd.@Src, 6, YEAR(GETDATE())) = 0', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (41, N'MAPLINK SPECS', N'Merge visit records', N'MERGE', 42, NULL, N'dbo.sp_Merge ''@F1'', ''@varKey''', NULL, N'Please enter the field number of the field to be merged.', N'', N'', N'');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (42, N'MAPLINK SPECS', N'Default Map', N'DEFAULT MAP', 43, NULL, N'LookupValue = dbo.ufn_F2F(SourceValue, ''@C1'', ''@varKey'', ''@C2'')', NULL, NULL, NULL, N'Please enter the name of the crosswalk.', N'Please enter CLEAR, PASS or the default value to be used if no match is found.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (43, N'MAPLINK SPECS', N'ZIP Code', N'ZIPCODE', 44, NULL, N'dbo.sp_SetZipCode ''@Src'', ''@C1''', NULL, N'', NULL, N'Please enter the value to be used when an invalid zip code is submitted.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (45, N'MAPLINK SPECS', N'yyyymmdd to mm/dd/yyyy', N'DATE7', 45, NULL, N'LookupValue = dbo.ufn_TransformDate(SourceValue, 7, YEAR(GETDATE()))', N'dbo.ufn_CheckDate(fd.@Src, 5, YEAR(GETDATE())) = 0', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (49, N'MAPLINK SPECS', N'Access date to yyyymmdd', N'DATE8', 46, N'nnnnn     ', N'LookupValue = CONVERT(CHAR(10), DATEADD(dd, CAST(SourceValue AS INT), ''12/30/1899''), 112)', N'ISNUMERIC(SourceValue) = 0 ', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (50, N'MAPLINK SPECS', N'mm/dd/yy to yyyymmdd', N'DATE9', 47, N'mm/dd/yy  ', N'LookupValue = dbo.ufn_TransformDate(SourceValue, 9, YEAR(GETDATE()))', N'dbo.ufn_CheckDate(fd.@Src, 9, YEAR(GETDATE())) = 0', NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (51, N'MAPLINK SPECS', N'Check number of characters ', N'CHECK LENGTH', 48, NULL, N'LookupValue = LookupValue', N'ISNUMERIC(''@C1'') = 0 OR ISNUMERIC(''@C2'') = 0 OR LEN(LTRIM(RTRIM(fd.@Src))) NOT BETWEEN @C1 AND @C2', NULL, NULL, N'Please enter the minimum length for the value.', N'Please enter the maximum length for the value.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (52, N'MAPLINK SPECS', N'Replace blank values with constant', N'BLANKFILL', 49, NULL, N'LookupValue = CASE WHEN LEN(RTRIM(SourceValue)) = 0 THEN ''@C1'' ELSE SourceValue END', NULL, NULL, NULL, N'Please enter the constant value that will replace blank values.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (54, N'MAPLINK SPECS', N'Replace constant value with SF1', N'SREPLACE', 51, NULL, N'LookupValue = CASE WHEN SourceValue = ''@C1'' THEN fd.@F1 ELSE SourceValue END', NULL, N'Please enter the field number where the replacement value is kept.', NULL, N'Please enter the constant value that will be replaced.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (57, N'MAPLINK SPECS', N'Append Constant', N'APPEND CONSTANT', 54, NULL, N'LookupValue = ISNULL(fd.@Src, '''') + ''@C2'' + ''@C1''', NULL, NULL, NULL, N'Please enter the constant value to be appended to the current field.', N'Please enter the value that will be used to separate the two values.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (58, N'MAPLINK SPECS', N'Prefix Constant', N'PREFIX CONSTANT', 55, NULL, N'LookupValue = ''@C1'' + ''@C2'' + ISNULL(fd.@Src, '''')', NULL, NULL, NULL, N'Please enter the constant value to be prefixed to the current field.', N'Please enter the value that will be used to separate the two values.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (56, N'MAPLINK SPECS', N'Remove duplicate values', N'DEDUP', 53, NULL, N'LookupValue = dbo.ufn_Dedup(SourceValue)', NULL, NULL, NULL, NULL, NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (59, N'HL7 MESSAGE', N'Insert HL7 message element', N'COMPOSE HL7', 56, NULL, NULL, NULL, N'Please enter the target field number of the first field to be inserted.', N'Please enter the target field number of the last field to be inserted.', N'Please enter the prefix text if needed.', N'Please enter a line control option if needed (START, NL or END).');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (60, N'HL7 MESSAGE ', N'Insert group sequence numbers', N'SET HL7 SEQ', 57, NULL, NULL, NULL, N'Please enter the field number that identifies group members.', N'Please enter the field number where the sequence number will be stored.', N'Please enter DISTINCT if you are numbering groups rather than the members of each group.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (61, N'MAPLINK SPECS', N'Replace target with SF1 + @C2 + @C1', N'TAPPEND CONSTANT TO FIELD', 58, NULL, N'@F2 = RTRIM(fd.@F1) + ''@C2'' + ''@C1''', NULL, N'Please enter the field number of the value to be inserted.', N'Please enter the target field number where the result is kept.', N'Please enter the constant value to be appended to the value of the field.', N'Please enter the value that will be used to separate the two values.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (64, N'MAPLINK SPECS', N'Check alphabetic range', N'CHECK ALPHA', 61, NULL, N'LookupValue = LookupValue', N'(fd.@Src < ''@C1'' OR fd.@Src > ''@C2'')', N' ', N' ', N'Please enter the lowest valid text.', N'Please enter the largest valid text.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (65, N'MAPLINK SPECS', N'Reverse text phrases', N'SWAP TEXT', 62, NULL, N'LookupValue = dbo.ufn_SwapText(SourceValue, ''@C1'')', N'dbo.ufn_CountChar(fd.@Src, ''@C1'') <> 1', NULL, NULL, N'Please enter the value that is used as the delimiter in the text.', NULL);
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (66, N'MAPLINK SPECS', N'Replace range of constants with SF1', N'REPLACE RANGE', 63, NULL, N'LookupValue = CASE WHEN CAST(SourceValue AS INT)  @C1 THEN  ''@C2'' ELSE SourceValue END', N'', N'', NULL, N'Please enter the range of values to change as  BETWEEN x AND y.', N'Please enter the replacement value for the range.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (62, N'MAPLINK SPECS', N'Replace target with @C1 + @C2 + SF1', N'TAPPEND FIELD TO CONSTANT', 59, NULL, N'@F2 = ''@C1'' + ''@C2'' + fd.@F1', NULL, N'Please enter the field number of the value to be inserted.', N'Please enter the target field number where the result is kept.', N'Please enter the constant value to be prefixed to the value of the field.', N'Please enter the value that will be used to separate the two values.');
INSERT `Macro_Names` (`ID`, `Category`, `Macro_Name`, `Macro_Short_Name`, `Ref_Number`, `Date_Display`, `Formula`, `Invalid_When`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES (63, N'MAPLINK SPECS', N'Check numeric range', N'CHECK NUMBER', 60, NULL, N'LookupValue = LookupValue', N'ISNUMERIC(SourceValue) = 0 OR ISNUMERIC(''@C1'') = 0 OR ISNUMERIC(''@C2'') = 0 OR fd.@Src < @C1 OR fd.@Src > @C2', N' ', N' ', N'Please enter the lowest valid number.', N'Please enter the largest valid number.');



/* Chad 11-26-2013 */
ALTER TABLE `universalTranslator`.`rel_configurationDataTranslations` 
DROP FOREIGN KEY `dtmacroId`;

DROP TABLE `universalTranslator`.`ref_macros`;

/** Grace 12-03-2013**/

ALTER TABLE `universalTranslator`.`rel_configurationDataTranslations` 
ADD CONSTRAINT `dtmacroId`
  FOREIGN KEY (`macroId`)
  REFERENCES `universalTranslator`.`Macro_Names` (`ID`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;


/** Chad 12-5-2013 **/
ALTER TABLE `universalTranslator`.`configurationTransportDetails` 
ADD COLUMN `reportableField1` INT NULL DEFAULT 0 AFTER `containsHeader`,
ADD COLUMN `reportableField2` INT NULL DEFAULT 0 AFTER `reportableField1`,
ADD COLUMN `reportableField3` INT NULL DEFAULT 0 AFTER `reportableField2`,
ADD COLUMN `reportableField4` INT NULL DEFAULT 0 AFTER `reportableField3`;

ALTER TABLE `universalTranslator`.`configurations` 
ADD COLUMN `clearFields` BIT NULL DEFAULT 0 AFTER `stepsCompleted`;

ALTER TABLE `universalTranslator`.`rel_TransportFTPDetails` 
ADD COLUMN `method` SMALLINT NULL DEFAULT 1 COMMENT '1 = Push\n2 = Get' AFTER `password`;

ALTER TABLE `universalTranslator`.`rel_TransportFTPDetails` 
CHANGE COLUMN `usename` `username` VARCHAR(45) NOT NULL ;

ALTER TABLE `universalTranslator`.`rel_TransportFTPDetails` 
CHANGE COLUMN `IP` `IP` VARCHAR(45) NULL ,
CHANGE COLUMN `directory` `directory` VARCHAR(255) NULL ,
CHANGE COLUMN `username` `username` VARCHAR(45) NULL ,
CHANGE COLUMN `password` `password` VARCHAR(45) NULL ,
CHANGE COLUMN `method` `method` SMALLINT(6) NOT NULL DEFAULT '1' COMMENT '1 = Push\n2 = Get' ;

ALTER TABLE `universalTranslator`.`configurationTransportDetails` 
ADD COLUMN `status` BIT NULL DEFAULT 1 AFTER `reportableField4`;

ALTER TABLE `universalTranslator`.`configurationTransportDetails` 
ADD COLUMN `targetFileName` VARCHAR(255) NULL AFTER `status`,
ADD COLUMN `appendDateTime` BIT NULL DEFAULT 0 AFTER `targetFileName`;

/** Chad 12-9-2013 ** /
ALTER TABLE `universalTranslator`.`configurations` 
ADD COLUMN `rejectOnError` SMALLINT NOT NULL DEFAULT '1' COMMENT '1 = If error set to Pending\n2 = if error reject Record\n3 = if error reject Group' AFTER `clearFields`;

ALTER TABLE `universalTranslator`.`configurationTransportDetails` 
ADD COLUMN `maxFileSize` INT NULL DEFAULT 0 AFTER `appendDateTime`;

CREATE TABLE `batchUploadRecords` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `batchId` int(11) NOT NULL,
  `messageTypeId` int(11) NOT NULL,
  `recordStatus` smallint(6) NOT NULL DEFAULT '2' COMMENT '1 = Rejected\n2 = Pending\n3 = Finalized',
  `f1` varchar(255) DEFAULT NULL,
  `f2` varchar(255) DEFAULT NULL,
  `f3` varchar(255) DEFAULT NULL,
  `f4` varchar(255) DEFAULT NULL,
  `f5` varchar(255) DEFAULT NULL,
  `f6` varchar(255) DEFAULT NULL,
  `f7` varchar(255) DEFAULT NULL,
  `f8` varchar(255) DEFAULT NULL,
  `f9` varchar(255) DEFAULT NULL,
  `f10` varchar(255) DEFAULT NULL,
  `f11` varchar(255) DEFAULT NULL,
  `f12` varchar(255) DEFAULT NULL,
  `f13` varchar(255) DEFAULT NULL,
  `f14` varchar(255) DEFAULT NULL,
  `f15` varchar(255) DEFAULT NULL,
  `f16` varchar(255) DEFAULT NULL,
  `f17` varchar(255) DEFAULT NULL,
  `f18` varchar(255) DEFAULT NULL,
  `f19` varchar(255) DEFAULT NULL,
  `f20` varchar(255) DEFAULT NULL,
  `f21` varchar(255) DEFAULT NULL,
  `f22` varchar(255) DEFAULT NULL,
  `f23` varchar(255) DEFAULT NULL,
  `f24` varchar(255) DEFAULT NULL,
  `f25` varchar(255) DEFAULT NULL,
  `f26` varchar(255) DEFAULT NULL,
  `f27` varchar(255) DEFAULT NULL,
  `f28` varchar(255) DEFAULT NULL,
  `f29` varchar(255) DEFAULT NULL,
  `f30` varchar(255) DEFAULT NULL,
  `f31` varchar(255) DEFAULT NULL,
  `f32` varchar(255) DEFAULT NULL,
  `f33` varchar(255) DEFAULT NULL,
  `f34` varchar(255) DEFAULT NULL,
  `f35` varchar(255) DEFAULT NULL,
  `f36` varchar(255) DEFAULT NULL,
  `f37` varchar(255) DEFAULT NULL,
  `f38` varchar(255) DEFAULT NULL,
  `f39` varchar(255) DEFAULT NULL,
  `f40` varchar(255) DEFAULT NULL,
  `f41` varchar(255) DEFAULT NULL,
  `f42` varchar(255) DEFAULT NULL,
  `f43` varchar(255) DEFAULT NULL,
  `f44` varchar(255) DEFAULT NULL,
  `f45` varchar(255) DEFAULT NULL,
  `f46` varchar(255) DEFAULT NULL,
  `f47` varchar(255) DEFAULT NULL,
  `f48` varchar(255) DEFAULT NULL,
  `f49` varchar(255) DEFAULT NULL,
  `f50` varchar(255) DEFAULT NULL,
  `f51` varchar(255) DEFAULT NULL,
  `f52` varchar(255) DEFAULT NULL,
  `f53` varchar(255) DEFAULT NULL,
  `f54` varchar(255) DEFAULT NULL,
  `f55` varchar(255) DEFAULT NULL,
  `f56` varchar(255) DEFAULT NULL,
  `f57` varchar(255) DEFAULT NULL,
  `f58` varchar(255) DEFAULT NULL,
  `f59` varchar(255) DEFAULT NULL,
  `f60` varchar(255) DEFAULT NULL,
  `f61` varchar(255) DEFAULT NULL,
  `f62` varchar(255) DEFAULT NULL,
  `f63` varchar(255) DEFAULT NULL,
  `f64` varchar(255) DEFAULT NULL,
  `f65` varchar(255) DEFAULT NULL,
  `f66` varchar(255) DEFAULT NULL,
  `f67` varchar(255) DEFAULT NULL,
  `f68` varchar(255) DEFAULT NULL,
  `f69` varchar(255) DEFAULT NULL,
  `f70` varchar(255) DEFAULT NULL,
  `f71` varchar(255) DEFAULT NULL,
  `f72` varchar(255) DEFAULT NULL,
  `f73` varchar(255) DEFAULT NULL,
  `f74` varchar(255) DEFAULT NULL,
  `f75` varchar(255) DEFAULT NULL,
  `f76` varchar(255) DEFAULT NULL,
  `f77` varchar(255) DEFAULT NULL,
  `f78` varchar(255) DEFAULT NULL,
  `f79` varchar(255) DEFAULT NULL,
  `f80` varchar(255) DEFAULT NULL,
  `f81` varchar(255) DEFAULT NULL,
  `f82` varchar(255) DEFAULT NULL,
  `f83` varchar(255) DEFAULT NULL,
  `f84` varchar(255) DEFAULT NULL,
  `f85` varchar(255) DEFAULT NULL,
  `f86` varchar(255) DEFAULT NULL,
  `f87` varchar(255) DEFAULT NULL,
  `f88` varchar(255) DEFAULT NULL,
  `f89` varchar(255) DEFAULT NULL,
  `f90` varchar(255) DEFAULT NULL,
  `f91` varchar(255) DEFAULT NULL,
  `f92` varchar(255) DEFAULT NULL,
  `f93` varchar(255) DEFAULT NULL,
  `f94` varchar(255) DEFAULT NULL,
  `f95` varchar(255) DEFAULT NULL,
  `f96` varchar(255) DEFAULT NULL,
  `f97` varchar(255) DEFAULT NULL,
  `f98` varchar(255) DEFAULT NULL,
  `f99` varchar(255) DEFAULT NULL,
  `f100` varchar(255) DEFAULT NULL,
  `f101` varchar(255) DEFAULT NULL,
  `f102` varchar(255) DEFAULT NULL,
  `f103` varchar(255) DEFAULT NULL,
  `f104` varchar(255) DEFAULT NULL,
  `f105` varchar(255) DEFAULT NULL,
  `f106` varchar(255) DEFAULT NULL,
  `f107` varchar(255) DEFAULT NULL,
  `f108` varchar(255) DEFAULT NULL,
  `f109` varchar(255) DEFAULT NULL,
  `f110` varchar(255) DEFAULT NULL,
  `f111` varchar(255) DEFAULT NULL,
  `f112` varchar(255) DEFAULT NULL,
  `f113` varchar(255) DEFAULT NULL,
  `f114` varchar(255) DEFAULT NULL,
  `f115` varchar(255) DEFAULT NULL,
  `f116` varchar(255) DEFAULT NULL,
  `f117` varchar(255) DEFAULT NULL,
  `f118` varchar(255) DEFAULT NULL,
  `f119` varchar(255) DEFAULT NULL,
  `f120` varchar(255) DEFAULT NULL,
  `f121` varchar(255) DEFAULT NULL,
  `f122` varchar(255) DEFAULT NULL,
  `f123` varchar(255) DEFAULT NULL,
  `f124` varchar(255) DEFAULT NULL,
  `f125` varchar(255) DEFAULT NULL,
  `f126` varchar(255) DEFAULT NULL,
  `f127` varchar(255) DEFAULT NULL,
  `f128` varchar(255) DEFAULT NULL,
  `f129` varchar(255) DEFAULT NULL,
  `f130` varchar(255) DEFAULT NULL,
  `f131` varchar(255) DEFAULT NULL,
  `f132` varchar(255) DEFAULT NULL,
  `f133` varchar(255) DEFAULT NULL,
  `f134` varchar(255) DEFAULT NULL,
  `f135` varchar(255) DEFAULT NULL,
  `f136` varchar(255) DEFAULT NULL,
  `f137` varchar(255) DEFAULT NULL,
  `f138` varchar(255) DEFAULT NULL,
  `f139` varchar(255) DEFAULT NULL,
  `f140` varchar(255) DEFAULT NULL,
  `f141` varchar(255) DEFAULT NULL,
  `f142` varchar(255) DEFAULT NULL,
  `f143` varchar(255) DEFAULT NULL,
  `f144` varchar(255) DEFAULT NULL,
  `f145` varchar(255) DEFAULT NULL,
  `f146` varchar(255) DEFAULT NULL,
  `f147` varchar(255) DEFAULT NULL,
  `f148` varchar(255) DEFAULT NULL,
  `f149` varchar(255) DEFAULT NULL,
  `f150` varchar(255) DEFAULT NULL,
  `f151` varchar(255) DEFAULT NULL,
  `f152` varchar(255) DEFAULT NULL,
  `f153` varchar(255) DEFAULT NULL,
  `f154` varchar(255) DEFAULT NULL,
  `f155` varchar(255) DEFAULT NULL,
  `f156` varchar(255) DEFAULT NULL,
  `f157` varchar(255) DEFAULT NULL,
  `f158` varchar(255) DEFAULT NULL,
  `f159` varchar(255) DEFAULT NULL,
  `f160` varchar(255) DEFAULT NULL,
  `f161` varchar(255) DEFAULT NULL,
  `f162` varchar(255) DEFAULT NULL,
  `f163` varchar(255) DEFAULT NULL,
  `f164` varchar(255) DEFAULT NULL,
  `f165` varchar(255) DEFAULT NULL,
  `f166` varchar(255) DEFAULT NULL,
  `f167` varchar(255) DEFAULT NULL,
  `f168` varchar(255) DEFAULT NULL,
  `f169` varchar(255) DEFAULT NULL,
  `f170` varchar(255) DEFAULT NULL,
  `f171` varchar(255) DEFAULT NULL,
  `f172` varchar(255) DEFAULT NULL,
  `f173` varchar(255) DEFAULT NULL,
  `f174` varchar(255) DEFAULT NULL,
  `f175` varchar(255) DEFAULT NULL,
  `f176` varchar(255) DEFAULT NULL,
  `f177` varchar(255) DEFAULT NULL,
  `f178` varchar(255) DEFAULT NULL,
  `f179` varchar(255) DEFAULT NULL,
  `f180` varchar(255) DEFAULT NULL,
  `f181` varchar(255) DEFAULT NULL,
  `f182` varchar(255) DEFAULT NULL,
  `f183` varchar(255) DEFAULT NULL,
  `f184` varchar(255) DEFAULT NULL,
  `f185` varchar(255) DEFAULT NULL,
  `f186` varchar(255) DEFAULT NULL,
  `f187` varchar(255) DEFAULT NULL,
  `f188` varchar(255) DEFAULT NULL,
  `f189` varchar(255) DEFAULT NULL,
  `f190` varchar(255) DEFAULT NULL,
  `f191` varchar(255) DEFAULT NULL,
  `f192` varchar(255) DEFAULT NULL,
  `f193` varchar(255) DEFAULT NULL,
  `f194` varchar(255) DEFAULT NULL,
  `f195` varchar(255) DEFAULT NULL,
  `f196` varchar(255) DEFAULT NULL,
  `f197` varchar(255) DEFAULT NULL,
  `f198` varchar(255) DEFAULT NULL,
  `f199` varchar(255) DEFAULT NULL,
  `f200` varchar(255) DEFAULT NULL,
  `f201` varchar(255) DEFAULT NULL,
  `f202` varchar(255) DEFAULT NULL,
  `f203` varchar(255) DEFAULT NULL,
  `f204` varchar(255) DEFAULT NULL,
  `f205` varchar(255) DEFAULT NULL,
  `f206` varchar(255) DEFAULT NULL,
  `f207` varchar(255) DEFAULT NULL,
  `f208` varchar(255) DEFAULT NULL,
  `f209` varchar(255) DEFAULT NULL,
  `f210` varchar(255) DEFAULT NULL,
  `f211` varchar(255) DEFAULT NULL,
  `f212` varchar(255) DEFAULT NULL,
  `f213` varchar(255) DEFAULT NULL,
  `f214` varchar(255) DEFAULT NULL,
  `f215` varchar(255) DEFAULT NULL,
  `f216` varchar(255) DEFAULT NULL,
  `f217` varchar(255) DEFAULT NULL,
  `f218` varchar(255) DEFAULT NULL,
  `f219` varchar(255) DEFAULT NULL,
  `f220` varchar(255) DEFAULT NULL,
  `f221` varchar(255) DEFAULT NULL,
  `f222` varchar(255) DEFAULT NULL,
  `f223` varchar(255) DEFAULT NULL,
  `f224` varchar(255) DEFAULT NULL,
  `f225` varchar(255) DEFAULT NULL,
  `f226` varchar(255) DEFAULT NULL,
  `f227` varchar(255) DEFAULT NULL,
  `f228` varchar(255) DEFAULT NULL,
  `f229` varchar(255) DEFAULT NULL,
  `f230` varchar(255) DEFAULT NULL,
  `f231` varchar(255) DEFAULT NULL,
  `f232` varchar(255) DEFAULT NULL,
  `f233` varchar(255) DEFAULT NULL,
  `f234` varchar(255) DEFAULT NULL,
  `f235` varchar(255) DEFAULT NULL,
  `f236` varchar(255) DEFAULT NULL,
  `f237` varchar(255) DEFAULT NULL,
  `f238` varchar(255) DEFAULT NULL,
  `f239` varchar(255) DEFAULT NULL,
  `f240` varchar(255) DEFAULT NULL,
  `f241` varchar(255) DEFAULT NULL,
  `f242` varchar(255) DEFAULT NULL,
  `f243` varchar(255) DEFAULT NULL,
  `f244` varchar(255) DEFAULT NULL,
  `f245` varchar(255) DEFAULT NULL,
  `f246` varchar(255) DEFAULT NULL,
  `f247` varchar(255) DEFAULT NULL,
  `f248` varchar(255) DEFAULT NULL,
  `f249` varchar(255) DEFAULT NULL,
  `f250` varchar(255) DEFAULT NULL,
  `f251` varchar(255) DEFAULT NULL,
  `f252` varchar(255) DEFAULT NULL,
  `f253` varchar(255) DEFAULT NULL,
  `f254` varchar(255) DEFAULT NULL,
  `f255` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


/**grace 12.9.2013**/
ALTER TABLE `universaltranslator`.`message_details` 
DROP COLUMN `messageBatchId`,
DROP COLUMN `utIncomingMessageId`;


CREATE TABLE `universalTranslator`.`message_BatchInfo` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `messageId` INT NOT NULL,
  `batchUploadsId` INT NOT NULL,
  `batchRecordsId` int NOT NULL,
  `dateCreated` DATETIME NOT NULL DEFAULT current_timestamp,
  `dateModified` DATETIME NOT NULL DEFAULT current_timestamp,
  PRIMARY KEY (`id`));
  
  
ALTER TABLE `universalTranslator`.`message_batchInfo` 
ADD CONSTRAINT `messBatchFK`
  FOREIGN KEY (`id`)
  REFERENCES `universalTranslator`.`message_Details` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;
  



