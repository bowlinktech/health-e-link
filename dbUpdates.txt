/** grace 05132014 05:41AM **/
INSERT INTO `universaltranslator`.`lu_ErrorCodes` (`displayText`, `description`) VALUES ('Invalid Set Up', 'File with same extension, delimiter should be set up either contain headers or do not contain headers.');

/** grace 05132014 04:23PM **/
INSERT INTO `universaltranslator`.`lu_ErrorCodes` (`displayText`) VALUES ('Invalid Delimiter');
UPDATE `universaltranslator`.`lu_ErrorCodes` SET `description`='Delimiter is valid for this type of file' WHERE `id`='15';

/** grace 05142014 11:47 AM **/
CREATE TABLE `universalTranslator`.`rel_TransportRhapsodyDetails` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transportId` int(11) NOT NULL,
  `directory` varchar(255) DEFAULT NULL,
   PRIMARY KEY (`id`),
  KEY `rhaPransportId_idx` (`transportId`),
  CONSTRAINT `rhaPransportId_idx` FOREIGN KEY (`transportId`) REFERENCES `configurationtransportdetails` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;


INSERT INTO `universaltranslator`.`ref_transportMethods` (`id`,`transportMethod`, `active`) VALUES (5, 'Rhapsody', 1);

/* Chad 05152014 3:53 PM */
ALTER TABLE `universalTranslator`.`configurationTransportDetails` 
ADD COLUMN `CCDJarTemplate` VARCHAR(45) NULL DEFAULT NULL AFTER `fileExt`;

UPDATE `universalTranslator`.`ref_fileTypes` SET `fileType`='xml (CCD)' WHERE `id`='9';

/** grace 05152014 11:34PM **/
ALTER TABLE `universaltranslator`.`batchuploads` 
ADD COLUMN `originalFolder` VARCHAR(255) NULL AFTER `configId`;
INSERT INTO `universaltranslator`.`lu_ProcessStatus` (`id`,`category`, `displayCode`, `displayText`) VALUES (35, 'batch', 'FR', 'File Reset');

/** Chad 05162014 @ 10:42 PM **/
ALTER TABLE `universalTranslator`.`configurationTransportDetails` 
DROP COLUMN `CCDJarTemplate`;

ALTER TABLE `universalTranslator`.`organizations` 
ADD COLUMN `CCDJarTemplate` VARCHAR(45) NULL DEFAULT NULL AFTER `cleanURL`;

/** Grace 05192014 11:29AM **/
CREATE TABLE `universalTranslator`.`ref_encoding` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `encoding` varchar(45) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;


INSERT INTO `universaltranslator`.`ref_encoding` (`id`, `encoding`) VALUES ('1', 'None');
INSERT INTO `universaltranslator`.`ref_encoding` (`id`, `encoding`) VALUES ('2', 'Base64');

ALTER TABLE `universaltranslator`.`configurationTransportDetails` 
ADD COLUMN `encodingId` INT NULL DEFAULT 1 AFTER `fileExt`,
ADD INDEX `fkEncoding_idx` (`encodingId` ASC);
ALTER TABLE `universaltranslator`.`configurationTransportDetails` 
ADD CONSTRAINT `fkEncoding`
  FOREIGN KEY (`encodingId`)
  REFERENCES `universaltranslator`.`ref_encoding` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;


/** grace 05192014 02:49PM **/
ALTER TABLE `universaltranslator`.`rel_TransportRhapsodyDetails` 
ADD COLUMN `method` INT NULL COMMENT '1 = Push\n2 = Get' AFTER `directory`;

/** grace 05202104 0809AM **/
ALTER TABLE `universaltranslator`.`SFTPJobRunLog` 
RENAME TO  `universaltranslator`.`moveFilesLog` ;

ALTER TABLE `universaltranslator`.`moveFilesLog` 
ADD COLUMN `transportMethodId` INT NOT NULL AFTER `id`;

INSERT INTO `universaltranslator`.`lu_ErrorCodes` (`id`, `displayText`, `description`) VALUES ('16', 'Cannot Determine Encoding Type for File', 'Multiple encodings found for file');
UPDATE `universaltranslator`.`lu_ErrorCodes` SET `description`='Delimiter is invalid for this type of file' WHERE `id`='15';

/** 05202014 Grace 12:08PM **/
ALTER TABLE `universaltranslator`.`batchuploads` 
ADD COLUMN `encodingId` INT NULL COMMENT 'the encoding file came in' AFTER `originalFolder`;


/** 05212014 Grace 11:28 AM**/
ALTER TABLE `universaltranslator`.`macro_names` 
ADD COLUMN `CategoryId` INT NULL DEFAULT 1 COMMENT '1 - data manipulation\n2 - processing' AFTER `ID`;

ALTER TABLE `universaltranslator`.`macro_names` 
DROP COLUMN `Category`;



/** 05212014 Grace 4:28 PM **/

use universalTranslator;
drop procedure if exists getConfigToFromFieldNo;
DELIMITER $$
 
CREATE PROCEDURE getConfigToFromFieldNo (in cInId int, in cOutId int)

proc_main:begin

drop TEMPORARY TABLE if exists fieldAndNos;

CREATE TEMPORARY TABLE fieldAndNos as (select id, cOutId as configIdOut, cInId as configIdIn, 
fieldNo as fieldNoIn, fieldNo as fieldNoOut, saveToTableName, saveToTableCol from configurationFormFields where configId = cOutId order by fieldNoOut);

update fieldAndNos set fieldNoIn = 0;

BEGIN
 
    DECLARE v_finished INTEGER DEFAULT 0;
	DECLARE v_saveToTableName varchar(100) DEFAULT "";
	DECLARE v_saveToTableCol varchar(100) DEFAULT "";
	DECLARE v_fieldNoIn int DEFAULT 0;
	DECLARE v_fieldNoOut int DEFAULT 0;
	DECLARE v_newFieldNo int DEFAULT 0;
	DECLARE v_id int default 0;

 
    -- declare cursor for employee email
    DEClARE fieldNo_cursor CURSOR FOR 
        SELECT id, fieldNoIn, fieldNoOut, saveToTableName, saveToTableCol from fieldAndNos order by fieldNoOut;

    -- declare NOT FOUND handler
    DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET v_finished = 1;
	
    OPEN fieldNo_cursor;
	
	get_fieldNo: LOOP
		
		
        
		FETCH fieldNo_cursor INTO v_id, v_fieldNoIn, v_fieldNoOut, v_saveToTableName, v_saveToTableCol;
 
        IF v_finished = 1 THEN 
            LEAVE get_fieldNo;
        END IF;
	
	
        -- find fieldNo and update
	if  (v_id > 1) then
		set v_newFieldNo = 0;
		
		select count(fieldNo) into v_newFieldNo from configurationFormFields where configId = cInId 
		and saveToTableName = v_saveToTableName and saveToTableCol = v_saveToTableCol order by fieldNo limit 1;
		
		if (v_newFieldNo > 0) then
			select fieldNo into v_newFieldNo from configurationFormFields where configId = cInId 
			and saveToTableName = v_saveToTableName and saveToTableCol = v_saveToTableCol order by fieldNo limit 1;
			update fieldAndNos set fieldNoIn = v_newFieldNo where id = v_id;
		end if; 
		
		
		
	end if;
	
    END LOOP get_fieldNo;
 
    CLOSE fieldNo_cursor;

	
END;

select * from fieldAndNos order by fieldNoOut;
end proc_main$$
 
DELIMITER ;



/** 05212014 Chad 3:47 PM **/
ALTER TABLE `universalTranslator`.`message_Encounters` 
DROP COLUMN `status`,
DROP COLUMN `encounterDate`,
CHANGE COLUMN `encounter` `ICD9Code` VARCHAR(45) NULL DEFAULT NULL ,
CHANGE COLUMN `performer` `description` VARCHAR(500) NULL DEFAULT NULL ;

/** 05222014 Chad @ 12:03 PM **/
CREATE TABLE `universalTranslator`.`configurationPreProcessing` (
  `id` INT UNSIGNED NOT NULL,
  `configId` INT NOT NULL,
  `macroId` INT NOT NULL,
  `fieldA` VARCHAR(45) NULL,
  `fieldB` VARCHAR(45) NULL,
  `constant1` VARCHAR(45) NULL,
  `constant2` VARCHAR(45) NULL,
  `processOrder` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `cppConfigId_idx` (`configId` ASC),
  INDEX `ccpMacroId_idx` (`macroId` ASC),
  CONSTRAINT `cppConfigId`
    FOREIGN KEY (`configId`)
    REFERENCES `universalTranslator`.`configurations` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ccpMacroId`
    FOREIGN KEY (`macroId`)
    REFERENCES `universalTranslator`.`macro_names` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE TABLE `universalTranslator`.`configurationPostProcessing` (
  `id` INT UNSIGNED NOT NULL,
  `configId` INT NOT NULL,
  `macroId` INT NOT NULL,
  `fieldA` VARCHAR(45) NULL,
  `fieldB` VARCHAR(45) NULL,
  `constant1` VARCHAR(45) NULL,
  `constant2` VARCHAR(45) NULL,
  `processOrder` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `cpstpConfigId_idx` (`configId` ASC),
  INDEX `cpstpMacroId_idx` (`macroId` ASC),
  CONSTRAINT `cpstpConfigId`
    FOREIGN KEY (`configId`)
    REFERENCES `universalTranslator`.`configurations` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `cpstpMacroId`
    FOREIGN KEY (`macroId`)
    REFERENCES `universalTranslator`.`macro_names` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

/** grace 05222014 10:49PM **/
INSERT INTO `universaltranslator`.`lu_errorcodes` (`id`, `displayText`, `description`, `isCustom`, `status`) VALUES ('17', 'File Did Not Decode Correctly', 'System was not able to decode file', 0, 1);


/** grace 05272014 **/
ALTER TABLE `universaltranslator`.`configurationdatatranslations` 
ADD COLUMN `categoryId` INT NULL DEFAULT 3 COMMENT '1. pre-processing\n2. post processing\n3. while processing' AFTER `processOrder`;
